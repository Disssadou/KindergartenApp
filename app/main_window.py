import sys
import threading
import logging
from datetime import date, datetime
import time
from typing import Dict, Optional
import subprocess
import os


from PyQt6.QtWidgets import (
    QMainWindow,
    QTabWidget,
    QWidget,
    QVBoxLayout,
    QLabel,
    QMessageBox,
    QApplication,
    QToolBar,
    QStatusBar,
    QStyle,
    QDialog,
    QFileDialog,
)
from PyQt6.QtCore import (
    Qt,
    QSize,
    pyqtSignal,
    QSettings,
    QTimer,
    QStandardPaths,
)
from PyQt6.QtGui import QAction, QIcon


try:
    from server.server import (
        stop_server,
    )
except ImportError:
    print("Warning: Could not import stop_server. Server stop on close might fail.")

    def stop_server():
        print("stop_server function not available.")
        return False


from utils.api_client import ApiClient

# --- –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π (View) ---
from app.views.groups_view import GroupsView
from app.views.menu_view import MenuView
from app.views.staff_view import StaffView
from app.views.children_view import ChildrenView
from app.views.attendance_view import AttendanceView
from app.views.reports_view import ReportsView
from app.views.payments_view import PaymentsView
from app.views.dashboard_view import DashboardView

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ ---
from app.dialogs.login_dialog import LoginDialog
from app.dialogs.settings_dialog import SettingsDialog


logger = logging.getLogger("KindergartenApp")


# --- –ö–ª–∞—Å—Å –ì–ª–∞–≤–Ω–æ–≥–æ –û–∫–Ω–∞ ---
class MainWindow(QMainWindow):
    status_update_signal = pyqtSignal(str)

    def __init__(self, api_client: ApiClient):
        super().__init__()
        self.api_client = api_client
        self.setWindowTitle(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –°–∏—Å—Ç–µ–º–∞ –£—á–µ—Ç–∞ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –î–æ—à–∫–æ–ª—å–Ω–æ–≥–æ –£—á—Ä–µ–∂–¥–µ–Ω–∏—è (–ò–°–£–ü–î–£)"
        )
        self.setMinimumSize(1100, 750)

        self.settings = QSettings()

        self.current_user_info: Optional[Dict] = (
            self.api_client.get_current_user_details()
        )

        if not self.current_user_info:

            logger.critical(
                "MainWindow —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ ApiClient!"
            )
            QMessageBox.critical(
                self,
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.",
            )

            QTimer.singleShot(0, self.close)
            return

        # --- –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π (View) ---

        try:
            self.groups_view = GroupsView(api_client=self.api_client, parent=self)
        except Exception as e:
            logger.exception("Failed to initialize GroupsView")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ì—Ä—É–ø–ø:\n{e}"
            )
            self.groups_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –ì—Ä—É–ø–ø"
            )

        try:
            self.menu_view = MenuView(api_client=self.api_client, parent=self)
        except Exception as e:
            logger.exception("Failed to initialize MenuView")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ú–µ–Ω—é:\n{e}"
            )
            self.menu_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –ú–µ–Ω—é"
            )

        try:
            self.dashboard_view = DashboardView(api_client=self.api_client, parent=self)
        except Exception as e:
            logger.exception("Failed to initialize DashboardView")
            self.dashboard_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )

        try:
            self.children_view = ChildrenView(api_client=self.api_client, parent=self)
        except Exception as e:
            logger.exception("Failed to initialize ChildrenView")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –î–µ—Ç–µ–π:\n{e}"
            )
            self.children_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –î–µ—Ç–µ–π"
            )

        try:
            self.attendance_view = AttendanceView(
                api_client=self.api_client, parent=self
            )
        except Exception as e:
            logger.exception("Failed to initialize AttendanceView")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:\n{e}",
            )
            self.attendance_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"
            )

        try:

            self.payments_view = PaymentsView(
                api_client=self.api_client, settings=self.settings, parent=self
            )
        except Exception as e:
            logger.exception("Failed to initialize PaymentsView")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –û–ø–ª–∞—Ç:\n{e}"
            )
            self.payments_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –û–ø–ª–∞—Ç"
            )

        try:

            self.reports_view = ReportsView(
                api_client=self.api_client, settings=self.settings, parent=self
            )
        except Exception as e:
            logger.exception("Failed to initialize ReportsView")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –û—Ç—á–µ—Ç–æ–≤:\n{e}",
            )
            self.reports_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –û—Ç—á–µ—Ç–æ–≤"
            )

        try:
            self.staff_view = StaffView(api_client=self.api_client, parent=self)
        except Exception as e:
            logger.exception("Failed to initialize StaffView")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ü–µ—Ä—Å–æ–Ω–∞–ª–∞:\n{e}",
            )
            self.staff_view = self._create_error_placeholder_widget(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –ü–µ—Ä—Å–æ–Ω–∞–ª–∞"
            )

        self.initUI_structure()

        self.connect_view_signals()
        self.update_window_title_with_user()
        self.configure_ui_for_user_role()
        self.load_initial_settings()

        logger.info("Main window initialized.")
        self.status_update_signal.emit("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥.")

    def _create_error_placeholder_widget(self, message: str) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.addWidget(QLabel(message))
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        return widget

    def initUI_structure(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–∫–Ω–∞."""
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)

        self.tabs.addTab(self.dashboard_view, "üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        self.tabs.addTab(self.groups_view, "üë• –ì—Ä—É–ø–ø—ã")
        self.tabs.addTab(self.children_view, "üë∂ –î–µ—Ç–∏")
        self.tabs.addTab(self.staff_view, "üë©‚Äçüè´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        self.tabs.addTab(self.attendance_view, "üìÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å")
        self.tabs.addTab(self.payments_view, "üí≥ –û–ø–ª–∞—Ç—ã")
        self.tabs.addTab(self.menu_view, "üç≤ –ü–∏—Ç–∞–Ω–∏–µ")
        self.tabs.addTab(self.reports_view, "üìÑ –û—Ç—á–µ—Ç—ã")

        self.create_actions()
        self.create_toolbars()
        self.create_menus()
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_update_signal.connect(self.status_bar.showMessage)

    def connect_view_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã status_changed –æ—Ç –≤—Å–µ—Ö View –∫ —Å–ª–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è StatusBar."""
        views_with_status_signal = [
            self.groups_view,
            self.menu_view,
            self.staff_view,
            self.children_view,
            self.attendance_view,
            self.reports_view,
            self.payments_view,
            self.dashboard_view,
        ]
        for view_instance in views_with_status_signal:
            if hasattr(view_instance, "status_changed") and hasattr(
                view_instance.status_changed, "connect"
            ):
                view_instance.status_changed.connect(self.update_status_bar_slot)
            else:
                logger.debug(
                    f"View {type(view_instance).__name__} does not have 'status_changed' signal."
                )

    def update_status_bar_slot(self, message: str, timeout: int = 5000):
        """–°–ª–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
        self.status_bar.showMessage(message, timeout)

    def create_actions(self):
        style = self.style()

        self.settings_action = QAction(
            QIcon.fromTheme(
                "preferences-system",
                style.standardIcon(QStyle.StandardPixmap.SP_FileDialogDetailedView),
            ),
            "&–ù–∞—Å—Ç—Ä–æ–π–∫–∏...",
            self,
        )
        self.settings_action.setStatusTip("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.settings_action.triggered.connect(self.open_settings_dialog)

        self.backup_action = QAction(
            QIcon.fromTheme(
                "document-save-as",
                style.standardIcon(QStyle.StandardPixmap.SP_DriveHDIcon),
            ),
            "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î...",
            self,
        )
        self.backup_action.setStatusTip(
            "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"
        )
        self.backup_action.triggered.connect(self.backup_database)
        self.backup_action.setEnabled(True)

        self.exit_action = QAction(
            QIcon.fromTheme(
                "application-exit",
                style.standardIcon(QStyle.StandardPixmap.SP_DialogCloseButton),
            ),
            "&–í—ã—Ö–æ–¥",
            self,
        )
        self.exit_action.setShortcut("Ctrl+Q")
        self.exit_action.setStatusTip("–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Ctrl+Q)")
        self.exit_action.triggered.connect(self.close)

        self.about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        self.about_action.triggered.connect(self.show_about_dialog)

    def create_toolbars(self):
        toolbar = QToolBar("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        toolbar.setIconSize(QSize(24, 24))
        self.addToolBar(Qt.ToolBarArea.TopToolBarArea, toolbar)

        toolbar.addAction(self.settings_action)
        toolbar.addAction(self.backup_action)
        toolbar.addSeparator()
        toolbar.addAction(self.exit_action)

    def create_menus(self):
        menu_bar = self.menuBar()
        file_menu = menu_bar.addMenu("&–§–∞–π–ª")
        file_menu.addAction(self.settings_action)
        file_menu.addAction(self.backup_action)
        file_menu.addSeparator()
        file_menu.addAction(self.exit_action)

        help_menu = menu_bar.addMenu("&–°–ø—Ä–∞–≤–∫–∞")
        help_menu.addAction(self.about_action)

    def update_window_title_with_user(self):
        if self.current_user_info:
            username = self.current_user_info.get("username", "N/A")
            self.setWindowTitle(f"–ò–°–£–ü–î–£ - [{username}]")

    def configure_ui_for_user_role(self):

        pass

    def open_settings_dialog(self):

        dialog = SettingsDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            self.update_status_bar_slot("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", 3000)
            self.apply_settings_changes()
        else:
            self.update_status_bar_slot("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ.", 3000)

    def apply_settings_changes(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ UI –∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ."""

        if hasattr(self.reports_view, "update_default_paths_from_settings"):
            self.reports_view.update_default_paths_from_settings()

        logger.info("Relevant settings changes applied to UI components.")

    def load_initial_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ MainWindow."""

        logger.info("Initial application settings loaded for MainWindow.")
        self.apply_settings_changes()

    def show_about_dialog(self):
        about_text = (
            f"{self.windowTitle()}\n\n"
            "–í–µ—Ä—Å–∏—è 0.2 (Alpha)\n\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ü–æ–ø–æ–≤ –ê.–ò.\n"
            f"–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().year}"
        )
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)

    def backup_database(self):
        logger.info("Initiating database backup process...")
        self.status_update_signal.emit("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")

        from app.dialogs.settings_dialog import DEFAULT_BACKUPS_PATH_KEY

        default_backup_dir = self.settings.value(
            DEFAULT_BACKUPS_PATH_KEY,
            QStandardPaths.writableLocation(
                QStandardPaths.StandardLocation.DocumentsLocation
            ),
        )
        default_backup_dir_str = str(default_backup_dir)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"kindergarten_db_backup_{timestamp}.sql"

        suggested_path = os.path.join(default_backup_dir_str, default_filename)

        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            suggested_path,
            "SQL Files (*.sql);;All Files (*)",
        )

        if not file_path:
            logger.info("Database backup cancelled by user.")
            self.status_update_signal.emit("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã pg_dump ---

        db_url = os.getenv("DATABASE_URL")
        if not db_url:
            logger.error("DATABASE_URL not found in environment for backup.")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.",
            )
            self.status_update_signal.emit("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞.")
            return

        try:
            from sqlalchemy.engine.url import make_url

            url_obj = make_url(db_url)

            db_user = url_obj.username
            db_password = url_obj.password
            db_host = url_obj.host
            db_port = str(url_obj.port) if url_obj.port else "5432"
            db_name = url_obj.database

            if not all([db_user, db_host, db_name]):
                raise ValueError(
                    "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–∑ DATABASE_URL."
                )

        except Exception as e:
            logger.error(f"Error parsing DATABASE_URL for backup: {e}")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}",
            )
            self.status_update_signal.emit("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –ë–î –¥–ª—è –±—ç–∫–∞–ø–∞.")
            return

        pg_dump_cmd = [
            "pg_dump",
            "-U",
            db_user,
            "-h",
            db_host,
            "-p",
            db_port,
            "-d",
            db_name,
            "-f",
            file_path,
            "--no-password",
        ]
        logger.debug(
            f"pg_dump command (password omitted for log): {' '.join(pg_dump_cmd[:-3])} -f {file_path}"
        )

        env = os.environ.copy()
        if db_password:
            env["PGPASSWORD"] = db_password
        else:

            logger.warning(
                "DB password not found in DATABASE_URL. pg_dump might fail or ask for password if .pgpass is not configured."
            )

        self.status_update_signal.emit(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ {file_path}...")
        QApplication.setOverrideCursor(Qt.CursorShape.WaitCursor)
        try:

            process = subprocess.Popen(
                pg_dump_cmd,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NO_WINDOW if os.name == "nt" else 0,
            )
            stdout, stderr = process.communicate(timeout=300)

            if process.returncode == 0:
                logger.info(f"Database backup successful: {file_path}")
                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:\n{file_path}",
                )
                self.status_update_signal.emit(
                    "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                )
            else:
                error_message = stderr.decode(errors="replace").strip()
                logger.error(
                    f"pg_dump failed (code {process.returncode}): {error_message}"
                )
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n{error_message}",
                )
                self.status_update_signal.emit(
                    f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {error_message[:50]}..."
                )

        except FileNotFoundError:
            logger.error(
                "pg_dump command not found. Is PostgreSQL client installed and in PATH?"
            )
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                "–ö–æ–º–∞–Ω–¥–∞ pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.",
            )
            self.status_update_signal.emit("pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except subprocess.TimeoutExpired:
            logger.error("pg_dump process timed out.")
            process.kill()
            stdout, stderr = process.communicate()
            QMessageBox.warning(
                self,
                "–¢–∞–π–º–∞—É—Ç",
                "–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.",
            )
            self.status_update_signal.emit("–¢–∞–π–º–∞—É—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        except Exception as e:
            logger.exception("An unexpected error occurred during database backup.")
            QMessageBox.critical(
                self,
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{e}",
            )
            self.status_update_signal.emit(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {str(e)[:50]}..."
            )
        finally:
            QApplication.restoreOverrideCursor()
            if "PGPASSWORD" in env:
                del env["PGPASSWORD"]
            if "db_password" in locals() and db_password:
                del db_password

            self.status_update_signal.emit("–û–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def closeEvent(self, event):
        logger.debug("Close event received for main window.")
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No,
        )
        if reply == QMessageBox.StandardButton.Yes:
            logger.info("User confirmed exit. Accepting close event.")

            event.accept()
        else:
            logger.info("User cancelled exit. Ignoring close event.")
            event.ignore()


if __name__ == "__main__":
    print("INFO: Running main_window.py directly for UI testing.")
    print("INFO: Using Mock API client. No real server or database interaction.")

    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s",
    )
    logger_test = logging.getLogger("KindergartenApp.Test")

    app_test = QApplication(sys.argv)

    QApplication.setOrganizationName("MyTestCompany")
    QApplication.setApplicationName("MyTestAppForMainWindow")

    class MockApiClient:
        def __init__(self, base_url="http://mockserver"):
            self.base_url = base_url
            self._token = None

        def set_token(self, token):
            self._token = token

        def login(self, username, password):
            logger_test.debug(f"Mock login: {username}")
            return {"access_token": "mock_token", "token_type": "bearer"}, None

        def get_current_user(self):
            logger_test.debug("Mock get_current_user")
            return {
                "id": 1,
                "username": "testuser",
                "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "role": "admin",
            }, None

        def get_groups(self, limit=100):
            logger_test.debug("Mock get_groups")
            return [], None

        def get_users(self, role=None, skip=0, limit=100):
            logger_test.debug("Mock get_users")
            return [], None

        def get_children(self, group_id=None, search=None, skip=0, limit=100):
            logger_test.debug("Mock get_children")
            return [], None

        def get_meal_menus_for_date_range(self, start_date, end_date):
            logger_test.debug("Mock get_meal_menus")
            return {}, None

        def get_attendance(self_or_other, date, group_id=None, child_id=None):
            logger_test.debug("Mock get_attendance")
            return [], None

        def get_holidays(self_or_other, start_date, end_date):
            logger_test.debug("Mock get_holidays")
            return [], None

        def get_attendance_report_data(self_or_other, group_id, year, month):
            logger_test.debug("Mock get_attendance_report_data")
            return {
                "year": year,
                "month": month,
                "days_in_month": 30,
                "group_id": group_id,
                "group_name": "Mock Group",
                "children_data": [],
                "holiday_dates": [],
                "daily_totals": {},
                "teacher_name": "Mock Teacher",
                "total_work_days": 20,
            }, None

        def download_attendance_report(self, params):
            logger_test.debug("Mock download_attendance_report")
            return b"mock excel data", None

        def get_child_transactions(self, child_id, limit=100):
            logger_test.debug(f"Mock get_child_transactions for {child_id}")
            return [], None

    mock_api = MockApiClient()

    try:
        main_window_test = MainWindow(api_client=mock_api)

    except Exception as e:
        logger_test.exception("Failed to create or show main window in test mode.")
        QMessageBox.critical(
            None, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UI", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ:\n{e}"
        )
        sys.exit(1)

    sys.exit(app_test.exec())
